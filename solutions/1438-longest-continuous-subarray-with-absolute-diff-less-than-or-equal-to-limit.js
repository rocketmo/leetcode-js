const assert = require('assert');
const { MinPriorityQueue, MaxPriorityQueue } = require('@datastructures-js/priority-queue');

/**
 * First solution: Use a min and max priority queue
 * @param {number[]} nums
 * @param {number} limit
 * @return {number}
 */
var longestSubarray = function(nums, limit) {
  let ans = 1;
  let left = 0;
  let right = 1;
  const minQueue = new MinPriorityQueue({ priority: (obj) => obj.val });
  const maxQueue = new MaxPriorityQueue({ priority: (obj) => obj.val });

  minQueue.enqueue({ index: 0, val: nums[0] });
  maxQueue.enqueue({ index: 0, val: nums[0] });

  while (right < nums.length) {
    const num = nums[right];
    const min = minQueue.front().priority;
    const max = maxQueue.front().priority;

    if (Math.abs(num - min) <= limit && Math.abs(num - max) <= limit) {
      ans = Math.max(ans, right - left + 1);
    } else {
      const pq = num < min ? maxQueue : minQueue;
      let maxLeft = left;

      while (pq.size() > 0 && (Math.abs(pq.front().priority - num) > limit ||
                pq.front().element.index < maxLeft)) {
        const prev = pq.dequeue();
        maxLeft = Math.max(maxLeft, prev.element.index);
      }

      left = maxLeft + 1;
    }

    minQueue.enqueue({ index: right, val: num });
    maxQueue.enqueue({ index: right, val: num });
    right += 1;
  }

  return ans;
};

// TODO: Solve by using two deques

assert.equal(longestSubarray([8,2,4,7], 4), 2);
assert.equal(longestSubarray([10,1,2,4,7,2], 5), 4);
assert.equal(longestSubarray([4,2,2,2,4,4,2,2], 0), 3);
assert.equal(longestSubarray([
  8952,1216,3953,6254,2285,4681,3317,6508,5847,2922,3689,4880,2357,5698,8063,8772,4781,1452,8427,
  4898,3422,7594,359,4757,9710,1689,6106,7268,4177,955,854,5171,2620,2169,1693,1844,7132,9610,
  4029,3406,8262,8319,6502,1992,3477,6289,8478,2195,9476,4172,60,1981,3303,9220,6194,7898,8930,
  3780,4386,618,2749,9083,8239,3820,6725,4485,6901,6530,4457,8094,1602,2124,3059,9168,261,7438,
  735,8003,3512,6455,8826,5510,3990,1541,1264,699,6925,7239,3094,2839,9754,8225,3113,8352,6305,
  8550,5908,3229,3813,5894,9602,1057,5588,849,7512,725,2897,2420,4679,7687,706,9558,8210,1063,
  9265,6493,1508,6553,8385,9379,4937,6462,4390,5771,7711,805,9048,7818,286,6994,4991,9645,5199,
  2448,9767,9656,9106,4552,1080,9948,5915,6802,6407,8517,388,9432,9532,1860,606,9402,8677,236,
  1654,5441,5517,6035,9026,565,6065,9548,1216,7946,1373,8841,7311,5481,8194,8915,56,2634,5326,
  5913,3506,2395,9507,2429,9660,1768,6619,5198,8334,6896,5899,5594,4257,9976,6038,617,1040,4042,
  4351,6506,9018,4651,9401,1368,1228,2792,4380,6780,1365,2069,4628,9025,4306,3848,3451,1620,4541,
  7872,772,8392,4937,3341,8908,1231,9023,5169,5566,4851,8457,2184,578,7246,5963,611,471,5169,6841,
  2684,9126,666,9640,8616,6957,3021,3235,3815,1881,9625,2131,9613,8295,2007,4368,7510,3217,906,
  5920,7474,5488,5812,3601,154,229,8008,529,2694,4151,9044,654,151,3770,1387,8591,2840,576,8654,
  3281,3432,7258,4732,3982,8037,8289,6085,5324,6423,1204,3199,9738,2974,3073,4866,9524,6984,7767,
  5956,380,7985,339,1717,9470,7086,9539,5630,5553,1214,6885,3200,8426,8100,9961,9235,9018,8210,
  7826,9830,9433,7375,9892,7720,2710,4396,8593,4941,9232,6496,9952,8843,4246,4185,5084,241,9906,
  752,7497,7497,5826,3804,8323,7278,3427,7799,5499,2373,6290,7166,889,1823,5838,135,4192,8866,886,
  5021,6206,246,5317,5541,5060,9654,815,3418,1340,5385,1965,1086,2104,4822,6712,9953,5584,3811,
  446,2999,8261,9406,5994,4957,4813,6194,6889,8625,7561,1216,3261,6680,3795,9960,692,3945,3680,
  3990,6467,6216,3444,2491,4903,5900,24,5035,7279,8158,2800,2399,511,6075,7160,9076,5602,8409,
  8024,5204,9893,1828,9562,4789,8980,4524,7038,186,5091,1417,8060,1884,8211,3614,9923,4337,7157,
  6107,3778,889,1680,9780,8442,8425,8378,2672,2126,4786,792,1120,3576,52,1013,6930,345,1085,902,
  147,572,8814,5557,5452,308,145,9160,3463,7684,3279,4363,4840,9531,9023,8545,4119,3826,2993,
  3453,6414,980,3910,9099,7416,580,5430,5353,6665,1962,263,9217,3032,8284,1535,3029,3578,3685,
  2893,4984,1603,964,5143,2397,1030,7261,2459,3784,707,4690,5642,956,9660,1463,7251,3281,3733,
  3033,1953,942,3316,886,1900,1433,3602,4688,4131,8638,6928,4074,529,4125,3192,5338,5734,5853,
  7443,6267,6333,1465,6982,4006,8018,5632,2927,9912,1866,3928,1185,7154,4538,8721,4978,5490,6072,
  6706,7477,5970,5766,5176,6489,7723,8377,281,6067,2087,4955,2753,4952,9287,2077,8988,2450,2735,
  7499,2495,2215,2640,1306,4160,3858,5832,5165,2811,4543,7751,5075,1266,7019,2524,9011,5788,7368,
  1761,2553,5175,1134,3061,7858,8759,573,768,3141,5833,5998,8319,5822,8252,6137,5605,1973,3026,
  6152,535,4439,3444,1023,4047,4988,5359,9230,6603,4004,5894,811,3798,4761,9314,112,3201,1592,
  2220,3650,6044,8293,4367,2308,2661,3737,1236,5103,9395,8368,8344,8839,9835,8879,7080,7199,9517,
  8385,7783,2997,8396,5827,3203,7096,1216,4538,3363,3751,2332,2189,3412,348,2681,7958,5946,3014,
  808,5904,1352,9990,3889,3464,1427,7230,3217,9857,5611,2704,9423,295,3565,5179,7871,9046,594,859,
  6010,8192,9162,5727,2221,7999,1120,8376,5224,9293,5105,9915,5207,9387,1468,7880,5538,6809,1172,
  4294,1032,5292,313,2953,5366,3700,5130,4301,4136,5018,7989,6816,197,4826,2661,4765,797,1898,
  7069,7056,3562,4560,5841,9266,8097,9438,4609,9971,4193,2825,5287,2340,5763,1550,6505,5847,8558,
  9290,3151,6486,7361,2459,7883,3980,619,4057,1295,1156,632,8510,8309,7728,9339,7935,5362,8527,
  2793,9226,8146,6516,217,6325,9055,9212,7382,2710,9722,9645,6114,846,6035,5783,7173,3892,8957,
  4975,1446,7240,5851,3199,2644,2207,7246,739,5965,9296,5525,2842,9319,8035,7837,138,9437,3834,
  9986,974,7277,2680
], 9411), 99);
